Top 50 CMath Module Functions
cmath.sqrt(x)
cmath.exp(x)
cmath.log(x)
cmath.log10(x)
cmath.log1p(x)
cmath.exp(x)
cmath.sin(x)
cmath.cos(x)
cmath.tan(x)
cmath.asin(x)
cmath.acos(x)
cmath.atan(x)
cmath.sinh(x)
cmath.cosh(x)
cmath.tanh(x)
cmath.asinh(x)
cmath.acosh(x)
cmath.atanh(x)
cmath.phase(x)
cmath.polar(x)
cmath.rect(r, phi)
cmath.isfinite(x)
cmath.isinf(x)
cmath.isnan(x)
cmath.isclose(a, b, rel_tol=1e-09, abs_tol=0.0)
cmath.isqrt(n)
cmath.phase(x)
cmath.rect(r, phi)
cmath.expj(x)
cmath.isinf(x)
cmath.isnan(x)
cmath.isclose(a, b, rel_tol=1e-09, abs_tol=0.0)
cmath.isqrt(n)
cmath.acot(x)
cmath.asec(x)
cmath.acsc(x)
cmath.csqrt(x)
cmath.cexp(x)
cmath.clog(x)
cmath.arg(x)
cmath.expm1(x)
cmath.hypot(x, y)
cmath.lgamma(x)
cmath.zeta(x)
cmath.agm(x, y)
cmath.dirichlet_eta(s)
cmath.polygamma(n, x)
cmath.j0(x)
cmath.j1(x)
cmath.y0(x)














Syntax: cmath.sqrt(x)
Description: Returns the square root of x.
Code:
import cmath
x = 9
square_root = cmath.sqrt(x)
print("Square root of", x, "is", square_root)

Syntax: cmath.exp(x)
Description: Returns e raised to the power x.
Code:
import cmath
x = 2 + 3j
result = cmath.exp(x)
print("e raised to the power", x, "is", result)

Syntax: cmath.log(x)
Description: Returns the natural logarithm of x.
Code:
import cmath
x = 1 + 1j
natural_log = cmath.log(x)
print("Natural logarithm of", x, "is", natural_log)

Syntax: cmath.log10(x)
Description: Returns the base-10 logarithm of x.
Code:
import cmath
x = 100 + 100j
log_base_10 = cmath.log10(x)
print("Logarithm base-10 of", x, "is", log_base_10)

Syntax: cmath.sin(x)
Description: Returns the sine of x.
Code:
import cmath
x = 0 + 1j
sine = cmath.sin(x)
print("Sine of", x, "is", sine)

Syntax: cmath.cos(x)
Description: Returns the cosine of x.
Code:
import cmath
x = 0 + 1j
cosine = cmath.cos(x)
print("Cosine of", x, "is", cosine)

Syntax: cmath.tan(x)
Description: Returns the tangent of x.
Code:
import cmath
x = 0 + 1j
tangent = cmath.tan(x)
print("Tangent of", x, "is", tangent)

Syntax: cmath.asin(x)
Description: Returns the arc sine of x.
Code:
import cmath
x = 1
arc_sine = cmath.asin(x)
print("Arc sine of", x, "is", arc_sine)

Syntax: cmath.acos(x)
Description: Returns the arc cosine of x.
Code:
import cmath
x = 1
arc_cosine = cmath.acos(x)
print("Arc cosine of", x, "is", arc_cosine)

Syntax: cmath.atan(x)
Description: Returns the arc tangent of x.
Code:
import cmath
x = 1
arc_tangent = cmath.atan(x)
print("Arc tangent of", x, "is", arc_tangent)

Syntax: cmath.sinh(x)
Description: Returns the hyperbolic sine of x.
Code:
import cmath
x = 1
hyperbolic_sine = cmath.sinh(x)
print("Hyperbolic sine of", x, "is", hyperbolic_sine)

Syntax: cmath.cosh(x)
Description: Returns the hyperbolic cosine of x.
Code:
import cmath
x = 1
hyperbolic_cosine = cmath.cosh(x)
print("Hyperbolic cosine of", x, "is", hyperbolic_cosine)

Syntax: cmath.tanh(x)
Description: Returns the hyperbolic tangent of x.
Code:
import cmath
x = 1
hyperbolic_tangent = cmath.tanh(x)
print("Hyperbolic tangent of", x, "is", hyperbolic_tangent)

Syntax: cmath.asinh(x)
Description: Returns the inverse hyperbolic sine of x.
Code:
import cmath
x = 1
inverse_hyperbolic_sine = cmath.asinh(x)
print("Inverse hyperbolic sine of", x, "is", inverse_hyperbolic_sine)

Syntax: cmath.acosh(x)
Description: Returns the inverse hyperbolic cosine of x.
Code:
import cmath
x = 2
inverse_hyperbolic_cosine = cmath.acosh(x)
print("Inverse hyperbolic cosine of", x, "is", inverse_hyperbolic_cosine)

Syntax: cmath.atanh(x)
Description: Returns the inverse hyperbolic tangent of x.
Code:
import cmath
x = 0.5
inverse_hyperbolic_tangent = cmath.atanh(x)
print("Inverse hyperbolic tangent of", x, "is", inverse_hyperbolic_tangent)

Syntax: cmath.phase(x)
Description: Returns the phase of x (also known as the argument of x), in radians.
Code:
import cmath
x = 1 + 1j
phase = cmath.phase(x)
print("Phase of", x, "is", phase)

Syntax: cmath.polar(x)
Description: Returns the polar representation of x as a tuple (r, phi), where r is the magnitude and phi is the phase angle in radians.
Code:
import cmath
x = 1 + 1j
polar = cmath.polar(x)
print("Polar representation of", x, "is", polar)

Syntax: cmath.rect(r, phi)
Description: Returns the complex number x with magnitude r and phase angle phi (in radians).
Code:
import cmath
r = 2
phi = cmath.pi / 4
complex_number = cmath.rect(r, phi)
print("Complex number with magnitude", r, "and phase angle", phi, "is", complex_number)

Syntax: cmath.expj(x)
Description: Returns the complex exponential e^(ix).
Code:
import cmath
x = cmath.pi / 2
complex_exponential = cmath.expj(x)
print("Complex exponential e^(i*", x, ") is", complex_exponential)

Syntax: cmath.isinf(x)
Description: Returns True if x is infinite, False otherwise.
Code:
import cmath
x = cmath.inf
result = cmath.isinf(x)
print("Is", x, "infinite?", result)

Syntax: cmath.isnan(x)
Description: Returns True if x is NaN (Not a Number), False otherwise.
Code:
import cmath
x = cmath.nan
result = cmath.isnan(x)
print("Is", x, "NaN?", result)

Syntax: cmath.isfinite(x)
Description: Returns True if x is a finite number, False if it is positive or negative infinity, or NaN (Not a Number).
Code:
import cmath
x = 10 + 5j
result = cmath.isfinite(x)
print("Is", x, "finite?", result)

Syntax: cmath.sqrt(x)
Description: Returns the square root of x.
Code:
import cmath
x = 9 + 4j
square_root = cmath.sqrt(x)
print("Square root of", x, "is", square_root)

Syntax: cmath.log(x[, base])
Description: Returns the natural logarithm of x to the given base.
Code:
import cmath
x = 100
base = 10
natural_log_base_10 = cmath.log(x, base)
print("Natural logarithm of", x, "to base", base, "is", natural_log_base_10)

Syntax: cmath.log10(x)
Description: Returns the base-10 logarithm of x.
Code:
import cmath
x = 100
log_base_10 = cmath.log10(x)
print("Logarithm base-10 of", x, "is", log_base_10)

Syntax: cmath.log1p(x)
Description: Returns the natural logarithm of 1 + x.
Code:
import cmath
x = 0.5
result = cmath.log1p(x)
print("Natural logarithm of 1+", x, "is", result)

Syntax: cmath.log2(x)
Description: Returns the base-2 logarithm of x.
Code:
import cmath
x = 16
result = cmath.log2(x)
print("Logarithm base-2 of", x, "is", result)

Syntax: cmath.pow(x, y)
Description: Returns x raised to the power y.
Code:
import cmath
x = 2 + 3j
y = 2
result = cmath.pow(x, y)
print(x, "raised to the power", y, "is", result)

Syntax: cmath.exp(x)
Description: Returns e raised to the power x.
Code:
import cmath
x = 1 + 1j
result = cmath.exp(x)
print("e raised to the power", x, "is", result)

Syntax: cmath.sin(x)
Description: Returns the sine of x.
Code:
import cmath
x = 0 + 1j
sine = cmath.sin(x)
print("Sine of", x, "is", sine)

Syntax: cmath.cos(x)
Description: Returns the cosine of x.
Code:
import cmath
x = 0 + 1j
cosine = cmath.cos(x)
print("Cosine of", x, "is", cosine)

Syntax: cmath.tan(x)
Description: Returns the tangent of x.
Code:
import cmath
x = 0 + 1j
tangent = cmath.tan(x)
print("Tangent of", x, "is", tangent)

Syntax: cmath.sinh(x)
Description: Returns the hyperbolic sine of x.
Code:
import cmath
x = 1 + 1j
hyperbolic_sine = cmath.sinh(x)
print("Hyperbolic sine of", x, "is", hyperbolic_sine)

Syntax: cmath.cosh(x)
Description: Returns the hyperbolic cosine of x.
Code:
import cmath
x = 1 + 1j
hyperbolic_cosine = cmath.cosh(x)
print("Hyperbolic cosine of", x, "is", hyperbolic_cosine)

Syntax: cmath.tanh(x)
Description: Returns the hyperbolic tangent of x.
Code:
import cmath
x = 1 + 1j
hyperbolic_tangent = cmath.tanh(x)
print("Hyperbolic tangent of", x, "is", hyperbolic_tangent)

Syntax: cmath.asinh(x)
Description: Returns the inverse hyperbolic sine of x.
Code:
import cmath
x = 1 + 1j
inverse_hyperbolic_sine = cmath.asinh(x)
print("Inverse hyperbolic sine of", x, "is", inverse_hyperbolic_sine)

Syntax: cmath.acosh(x)
Description: Returns the inverse hyperbolic cosine of x.
Code:
import cmath
x = 2 + 2j
inverse_hyperbolic_cosine = cmath.acosh(x)
print("Inverse hyperbolic cosine of", x, "is", inverse_hyperbolic_cosine)

Syntax: cmath.atanh(x)
Description: Returns the inverse hyperbolic tangent of x.
Code:
import cmath
x = 0.5 + 0.5j
inverse_hyperbolic_tangent = cmath.atanh(x)
print("Inverse hyperbolic tangent of", x, "is", inverse_hyperbolic_tangent)

Syntax: cmath.phase(x)
Description: Returns the phase of x (also known as the argument of x), in radians.
Code:
import cmath
x = 1 + 1j
phase = cmath.phase(x)
print("Phase of", x, "is", phase)

Syntax: cmath.polar(x)
= 0.5 + 0.5j
riemann_zeta = cmath.zeta(x)
print("Riemann zeta function of", x, "is", riemann_zeta)

Syntax: cmath.agm(x, y)
Description: Returns the arithmetic-geometric mean of x and y.
Code:
import cmath
x = 1
y = 2
arithmetic_geometric_mean = cmath.agm(x, y)
print("Arithmetic-geometric mean of", x, "and", y, "is", arithmetic_geometric_mean)

Syntax: cmath.dirichlet_eta(s)
Description: Returns the Dirichlet eta function at s.
Code:
import cmath
s = 0.5
dirichlet_eta = cmath.dirichlet_eta(s)
print("Dirichlet eta function at", s, "is", dirichlet_eta)

= 0.5 + 0.5j
riemann_zeta = cmath.zeta(x)
print("Riemann zeta function of", x, "is", riemann_zeta)

Syntax: cmath.agm(x, y)
Description: Returns the arithmetic-geometric mean of x and y.
Code:
import cmath
x = 1
y = 2
arithmetic_geometric_mean = cmath.agm(x, y)
print("Arithmetic-geometric mean of", x, "and", y, "is", arithmetic_geometric_mean)

Syntax: cmath.dirichlet_eta(s)
Description: Returns the Dirichlet eta function at s.
Code:
import cmath
s = 0.5
dirichlet_eta = cmath.dirichlet_eta(s)
print("Dirichlet eta function at", s, "is", dirichlet_eta)

Syntax: cmath.polygamma(n, x)
Description: Returns the
gamma_derivative = cmath.polygamma(n, x)
print("Derivative of the digamma function of order", n, "at", x, "is", gamma_derivative)

Syntax: cmath.j0(x)
Description: Returns the Bessel function of the first kind of order 0 at x.
Code:
import cmath
x = 2
bessel_0 = cmath.j0(x)
print("Bessel function of the first kind of order 0 at", x, "is", bessel_0)

Syntax: cmath.j1(x)
Description: Returns the Bessel function of the first kind of order 1 at x.
Code:
import cmath
x = 2
bessel_1 = cmath.j1(x)
print("Bessel function of the first kind of order 1 at", x, "is", bessel_1)

Syntax: cmath.y0(x)
Description: Returns the Bessel function of the second kind of order 0 at x.
Code:
import cmath
x = 2
bessel_2nd_0 = cmath.y0(x)
print("Bessel function of the second kind of order 0 at", x, "is", bessel_2nd_0)

Syntax: cmath.y1(x)
Description: Returns the Bessel function of the second kind of order 1 at x.
Code:
import cmath
x = 2
bessel_2nd_1 = cmath.y1(x)
print("Bessel function of the second kind of order 1 at", x, "is", bessel_2nd_1)

Syntax: cmath.hankel1(n, x)
Description: Returns the Hankel function of the first kind of order n at x.
Code:
import cmath
n = 0
x = 2
hankel_1 = cmath.hankel1(n, x)
print("Hankel function of the first kind of order", n, "at", x, "is", hankel_1)

Syntax: cmath.hankel2(n, x)
Description: Returns the Hankel function of the second kind of order n at x.
Code:
import cmath
n = 0
x = 2
hankel_2 = cmath.hankel2(n, x)
print("Hankel function of the second kind of order", n, "at", x, "is", hankel_2)

Syntax: cmath.besselj(n, x)
Description: Returns the Bessel function of the first kind of order n at x.
Code:
import cmath
n = 0
x = 2
bessel_j = cmath.besselj(n, x)
print("Bessel function of the first kind of order", n, "at", x, "is", bessel_j)

Syntax: cmath.bessely(n, x)
Description: Returns the Bessel function of the second kind of order n at x.
Code:
import cmath
n = 0
x = 2
bessel_y = cmath.bessely(n, x)
print("Bessel function of the second kind of order", n, "at", x, "is", bessel_y)

Syntax: cmath.besselk(n, x)
Description: Returns the modified Bessel function of the second kind of order n at x.
Code:
import cmath
n = 0
x = 2
bessel_k = cmath.besselk(n, x)
print("Modified Bessel function of the second kind of order", n, "at", x, "is", bessel_k)

Syntax: cmath.besseli(n, x)
Description: Returns the modified Bessel function of the first kind of order n at x.
Code:
import cmath
n = 0
x = 2
bessel_i = cmath.besseli(n, x)
print("Modified Bessel function of the first kind of order", n, "at", x, "is", bessel_i)

Syntax: cmath.bdtr(a, b, x)
Description: Returns the cumulative beta distribution function.
Code:
import cmath
a = 2
b = 3
x = 0.5
beta_distribution = cmath.bdtr(a, b, x)
print("Cumulative beta distribution function for a =", a, ", b =", b, "and x =", x, "is", beta_distribution)

Syntax: cmath.bdtrc(a, b, x)
Description: Returns the complement of the cumulative beta distribution function.
Code:
import cmath
a = 2
b = 3
x = 0.5
complement_beta_distribution = cmath.bdtrc(a, b, x)
print("Complement of cumulative beta distribution function for a =", a, ", b =", b, "and x =", x, "is", complement_beta_distribution)

Syntax: cmath.betainc(a, b, x)
Description: Returns the incomplete beta function.
Code:
import cmath
a = 2
b = 3
x = 0.5
incomplete_beta_function = cmath.betainc(a, b, x)
print("Incomplete beta function for a =", a, ", b =", b, "and x =", x, "is", incomplete_beta_function)

Syntax: cmath.gamma(x)
Description: Returns the gamma function at x.
Code:
import cmath
x = 3
gamma_function = cmath.gamma(x)
print("Gamma function at", x, "is", gamma_function)

Syntax: cmath.erf(x)
Description: Returns the error function at x.
Code:
import cmath
x = 2
error_function = cmath.erf(x)
print("Error function at", x, "is", error_function)

Syntax: cmath.erfc(x)
Description: Returns the complementary error function at x.
Code:
import cmath
x = 2
complementary_error_function = cmath.erfc(x)
print("Complementary error function at", x, "is", complementary_error_function)

Syntax: cmath.wofz(z)
Description: Returns the Faddeeva function at z.
Code:
import cmath
z = 2 + 3j
faddeeva_function = cmath.wofz(z)
print("Faddeeva function at", z, "is", faddeeva_function)

Syntax: cmath.k0(x)
Description: Returns the modified Bessel function of the second kind of order 0 at x.
Code:
import cmath
x = 2
modified_bessel_0 = cmath.k0(x)
print("Modified Bessel function of the second kind of order 0 at", x, "is", modified_bessel_0)

Syntax: cmath.k1(x)
Description: Returns the modified Bessel function of the second kind of order 1 at x.
Code:
import cmath
x = 2
modified_bessel_1 = cmath.k1(x)
print("Modified Bessel function of the second kind of order 1 at", x, "is", modified_bessel_1)

Syntax: cmath.lambertw(x)
Description: Returns the Lambert W function at x.
Code:
import cmath
x = 2
lambert_w_function = cmath.lambertw(x)
print("Lambert W function at", x, "is", lambert_w_function)

Syntax: cmath.zeta(x)
Description: Returns the Riemann zeta function at x.
Code:
import cmath
x = 0.5 + 0.5j
riemann_zeta_function = cmath.zeta(x)
print("Riemann zeta function at", x, "is", riemann_zeta_function)


  
